#version 430

// Process particles in blocks of 240. Because my graphics card has 240 shader units.
layout (local_size_x = 240, local_size_y = 1, local_size_z = 1) in;

struct Particle {
    vec4 origPosition;
    vec4 position;
    vec4 startColor;
    vec4 endColor;
    vec4 accelleration;
    vec4 speed;
};

layout (std430, binding = 0) buffer PositionBuffer {
    Particle positions[];
};

// Delta time
uniform float dt;
uniform bool  collapse;

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main(void)
{
    if (collapse) {
        uint index = gl_GlobalInvocationID.x;

        vec4 a    = positions[index].accelleration;
        vec4 v    = positions[index].speed;
        vec4 pos  = positions[index].position;
        vec4 oPos = positions[index].origPosition;

        float newDT = dt * 15.0;

        // If we go up again and are very close to the original position, just snap to it.
        if ((v.y > 0.0 && (oPos.y-pos.y) <= 0.01) || pos.y > (oPos.y+0.01)) {
            pos = oPos;
            v = vec4(0,0,0,0);
            a = vec4(0,0,0,0);
        } else {

            v = v + a * newDT;
            pos = pos + v * newDT;

            // So particles don't get too fast.
            if (v.y < -1.5) {
                v.y = -1.5;
            }

            float randV = rand(oPos.xy);
            randV = min(0.9, max(2.5, randV*3.0));
            // But still get back up to the top!
            if (v.y > 0.0 && v.y <= randV) {
                v.y = randV;
            }

            if (v.y < 0.0 && pos.y < -50.0) {
                v.y *= -2.5;
            }
        }

        // Store the new position and velocity back into the buffers
        positions[index].position = pos;
        positions[index].speed = v;
        positions[index].accelleration = a;
    }
}



